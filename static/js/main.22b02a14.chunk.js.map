{"version":3,"sources":["Header.js","requests.js","Nav.js","VideoCard.js","axios.js","Results.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","src","alt","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchMystery","fetchSciFi","fetchWestern","fetchAnimation","fetchTV","fetchDocumentaries","Nav","setSelectedOption","onClick","VideoCard","forwardRef","ref","movie","backdrop_path","poster_path","line","element","truncateText","textTruncateChild","href","text","overview","title","original_name","media_type","release_date","first_air_date","ThumbUpSharp","vote_count","instance","axios","create","baseURL","Results","selectedOption","useState","movies","setMovies","useEffect","a","get","request","data","results","fetchData","map","key","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.22b02a14.chunk.js","sourcesContent":["import React from 'react'\r\nimport \"./Header.css\";\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport FlashOnIcon from '@material-ui/icons/FlashOn';\r\nimport LiveTvIcon from '@material-ui/icons/LiveTv';\r\nimport VideoLibraryIcon from '@material-ui/icons/VideoLibrary';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport PersonOutlineIcon from '@material-ui/icons/PersonOutline';\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"header__icons\">\r\n                <div className=\"header__icon header__icon--active\">\r\n                <HomeIcon />\r\n                <p>Home</p>\r\n                </div>\r\n                <div className=\"header__icon\">\r\n                <FlashOnIcon />\r\n                <p>Trending</p>\r\n                </div>\r\n                <div className=\"header__icon\">\r\n                <LiveTvIcon />\r\n                <p>Verified</p>\r\n                </div>\r\n                <div className=\"header__icon\">\r\n                <VideoLibraryIcon />\r\n                <p>Collections</p>\r\n                </div>\r\n                <div className=\"header__icon\">\r\n                <SearchIcon />\r\n                <p>Search</p>\r\n                </div>\r\n                <div className=\"header__icon\">\r\n                <PersonOutlineIcon />\r\n                <p>Account</p>\r\n                </div>\r\n            </div>\r\n            <img  \r\n            src=\"https://press.hulu.com/wp-content/uploads/2020/02/hulu-white.png\" \r\n            alt=\"\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","const API_KEY = `f55940cec4d2d71502bf016b4aa03927`;\r\n\r\nconst requests = {\r\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n  fetchActionMovies: `/discover/movie?api_key =${API_KEY}&with_genres=28`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  fetchMystery:`/discover/movie?api_key=${API_KEY}&with_genres=9648`,\r\n  fetchSciFi:`/discover/movie?api_key=${API_KEY}&with_genres=878`,\r\n  fetchWestern:`/discover/movie?api_key=${API_KEY}&with_genres=37`,\r\n  fetchAnimation:`/discover/movie?api_key=${API_KEY}&with_genres=16`,\r\n  fetchTV:`/discover/movie?api_key=${API_KEY}&with_genres=10770`,\r\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n};\r\n\r\nexport default requests;","import React from 'react'\r\nimport \"./Nav.css\";\r\nimport requests from './requests';\r\nfunction Nav({setSelectedOption}) {\r\n    return (\r\n        <div className=\"nav\">\r\n            <h2 onClick={()=>setSelectedOption(requests.fetchTrending)}>\r\n                Trending\r\n            </h2>\r\n            <h2 onClick={()=>setSelectedOption(requests.fetchTopRated)}>Top Rated</h2>\r\n            <h2 onClick={()=>setSelectedOption(requests.fetchActionMovies)}>Action</h2>\r\n            <h2 onClick={()=>setSelectedOption(requests.fetchComedyMovies)}>Comedy</h2>\r\n            <h2 onClick={()=>setSelectedOption(requests.fetchHorrorMovies)}>Horror</h2>\r\n            <h2 onClick={()=>setSelectedOption(requests.fetchRomanceMovies)}>Romance</h2>\r\n            <h2 onClick={()=>setSelectedOption(requests.fetchMystery)}>Mystery</h2>\r\n            <h2 onClick={()=>setSelectedOption(requests.fetchSciFi)}>Sci-fi</h2>\r\n            <h2 onClick={()=>setSelectedOption(requests.fetchWestern)}>Western</h2>\r\n            <h2 onClick={()=>setSelectedOption(requests.fetchAnimation)}>Animation</h2>\r\n            <h2 onClick={()=>setSelectedOption(requests.fetchTV)}> Tv Movie</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav;\r\n","import React, { forwardRef } from 'react'\r\nimport \"./VideoCard.css\"\r\nimport TextTruncate from \"react-text-truncate\";\r\nimport {ThumbUpSharp} from \"@material-ui/icons\";\r\n//\r\nconst base_url = \" https://image.tmdb.org/t/p/original/\";\r\n//\r\nconst  VideoCard = forwardRef(({movie},ref) =>{\r\n    return (\r\n        <div ref={ref} className=\"videoCard\">\r\n            \r\n            <img src={`${base_url}${movie.backdrop_path || movie.poster_path}`} alt=\"movie poster\" />\r\n            <TextTruncate \r\n            line={1}\r\n            element=\"p\"\r\n            truncateText=\"...\"\r\n            textTruncateChild={<a href=\"#\">Read on</a>}\r\n            text={movie.overview}\r\n            />\r\n            <h2>{movie.title || movie.original_name}</h2>\r\n            <p className='videoCard__stats'>\r\n               \r\n                {movie.media_type && `${movie.media_type} .` }\r\n                {movie.release_date || movie.first_air_date} .\r\n                <ThumbUpSharp />{\" \"}\r\n                {movie.vote_count}</p>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default VideoCard;\r\n","import axios from 'axios';\r\nconst instance  =axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\nexport default instance;\r\n","import React from 'react';\r\nimport \"./Results.css\";\r\nimport VideoCard from \"./VideoCard\"\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport axios from \"./axios\";\r\nimport FlipMove from \"react-flip-move\";\r\n\r\nfunction Results({selectedOption}) {\r\n    const [movies,setMovies]=useState([]);\r\n    useEffect(() =>{\r\n            //run this code Every Time the Result component load / mounts\r\n            async function fetchData(){\r\n                const request = await axios.get(selectedOption);\r\n                setMovies(request.data.results);\r\n                return request;\r\n            }\r\n            fetchData();\r\n    },[selectedOption])\r\n    return (\r\n        <div className=\"results\">\r\n            <FlipMove>\r\n            {movies.map((movie)=>(\r\n                  <VideoCard key={movie.id} movie={movie}/>\r\n            ))}\r\n            </FlipMove>\r\n           \r\n        </div>\r\n\r\n    )\r\n}\r\nexport default Results;","import React from 'react';\nimport './App.css';\nimport Header from './Header';\nimport Nav from './Nav';\nimport Results from \"./Results\";\nimport { useState } from 'react';\nimport requests from './requests';\n//\nfunction App() {\n  const [selectedOption,setSelectedOption]=useState(requests.fetchTrending);\n  return (\n    <div className=\"app\">\n    <Header />\n\n    <Nav setSelectedOption={setSelectedOption}/>\n\n    <Results selectedOption={selectedOption}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}